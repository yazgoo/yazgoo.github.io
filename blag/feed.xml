<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/blag/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/blag/" rel="alternate" type="text/html" /><updated>2019-10-15T19:44:28+02:00</updated><id>http://localhost:4000/blag/</id><title type="html">It must be bunnies</title><subtitle>My little blog</subtitle><entry><title type="html">Presenting youtube-subscriptions</title><link href="http://localhost:4000/blag/2019/10/15/presenting-youtube-subscriptions.html" rel="alternate" type="text/html" title="Presenting youtube-subscriptions" /><published>2019-10-15T00:00:00+02:00</published><updated>2019-10-15T00:00:00+02:00</updated><id>http://localhost:4000/blag/2019/10/15/presenting-youtube-subscriptions</id><content type="html" xml:base="http://localhost:4000/blag/2019/10/15/presenting-youtube-subscriptions.html">&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/WVZpqXBmB3U&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><category term="rust" /><category term="youtube" /><category term="terminal" /><summary type="html"></summary></entry><entry><title type="html">Creating a looper in shell part 3: multiple layers</title><link href="http://localhost:4000/blag/2019/02/20/creating-a-looper-in-shell-part-3.html" rel="alternate" type="text/html" title="Creating a looper in shell part 3: multiple layers" /><published>2019-02-20T00:00:00+01:00</published><updated>2019-02-20T00:00:00+01:00</updated><id>http://localhost:4000/blag/2019/02/20/creating-a-looper-in-shell-part-3</id><content type="html" xml:base="http://localhost:4000/blag/2019/02/20/creating-a-looper-in-shell-part-3.html">&lt;h1 id=&quot;creating-a-looper-in-shell-part-3-multiple-layers&quot;&gt;Creating a looper in shell part 3: multiple layers&lt;/h1&gt;

&lt;p&gt;To understand this article better it is advised to have read the &lt;a href=&quot;../18/creating-a-looper-in-shell-part-2.html&quot;&gt;previous one&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the &lt;a href=&quot;../18/creating-a-looper-in-shell-part-2.html&quot;&gt;previous article&lt;/a&gt;, we saw how to add a layer to the loop, here was the script behavior:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blag/images/looper_with_layer_timeline.png&quot; alt=&quot;timeline&quot; title=&quot;looper with layer timeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This aims at adding multiple layers by pressing any key, and being able to remove last layer by pressing &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; (pedal #2).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/blag/images/pedal2.png&quot; alt=&quot;timeline&quot; title=&quot;looper with multiple layer timeline&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;programming-pedals&quot;&gt;programming pedals&lt;/h1&gt;

&lt;p&gt;As mentionned earlier, I’m using cheap pedals.&lt;/p&gt;

&lt;p&gt;I’m using &lt;a href=&quot;https://github.com/rgerganov/footswitch&quot;&gt;footswitch&lt;/a&gt; to program pedals.&lt;/p&gt;

&lt;p&gt;For example, here is how to get one of them to simulate a &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt; keypress:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo&lt;/span&gt; ./footswitch &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt; a
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’ll be using two pedals, one for adding a layer, one for removing last layer.&lt;/p&gt;

&lt;h1 id=&quot;lets-add-layers&quot;&gt;Let’s add layers&lt;/h1&gt;

&lt;p&gt;Here are diffs between &lt;a href=&quot;../18/creating-a-looper-in-shell-part-2.html&quot;&gt;last version&lt;/a&gt; and new one (in red are the old lines and in green the new ones).&lt;/p&gt;

&lt;style&gt;
#wrapper {
display: inline-block;
margin-top: 1em;
min-width: 800px;
text-align: left;
}
h2 {
background: #fafafa;
background: -moz-linear-gradient(#fafafa, #eaeaea);
background: -webkit-linear-gradient(#fafafa, #eaeaea);
-ms-filter: &quot;progid:DXImageTransform.Microsoft.gradient(startColorstr='#fafafa',endColorstr='#eaeaea')&quot;;
border: 1px solid #d8d8d8;
border-bottom: 0;
color: #555;
font: 14px sans-serif;
overflow: hidden;
padding: 10px 6px;
text-shadow: 0 1px 0 white;
margin: 0;
}
.file-diff {
border: 1px solid #d8d8d8;
margin-bottom: 1em;
overflow: auto;
padding: 0.5em 0;
}
.file-diff &gt; div {
width: 100%:
}
pre {
margin: 0;
font-family: &quot;Bitstream Vera Sans Mono&quot;, Courier, monospace;
font-size: 12px;
line-height: 1.4em;
text-indent: 0.5em;
}
.file {
color: #aaa;
}
.delete {
background-color: #fdd;
}
.insert {
background-color: #dfd;
}
.info {
color: #a0b;
}
&lt;/style&gt;

&lt;p&gt;Let’s modify the input function so that it returns &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt; return code
and so that it sets a variable (&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; with the key that was pressed):&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;context&quot;&gt; input() {&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   stty raw&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-  dd bs=1 count=1 2&amp;gt; /dev/null&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  key=$(dd bs=1 count=1 2&amp;gt; /dev/null)&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  rc=$?&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  [ $rc -ne 0 ] &amp;amp;&amp;amp; return $rc&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   stty -raw&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  return 0&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Instead of playing one layer (&lt;code class=&quot;highlighter-rouge&quot;&gt;layer.wav&lt;/code&gt;), we play a bunch of them (&lt;code class=&quot;highlighter-rouge&quot;&gt;layer1.wav&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;layer2.wav&lt;/code&gt;, …) based on &lt;code class=&quot;highlighter-rouge&quot;&gt;$layer_number&lt;/code&gt; variable.
Instead of returning one pid, we return a list op PIDs.&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;context&quot;&gt; input() {&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-play_layer() {&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-  play_layer_pid=&quot;&quot;&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-  if [ -e &quot;layer.wav&quot; ]&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-  then&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    aplay layer.wav &amp;amp;&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    play_layer_pid=$!&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-  fi&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+play_layers() {&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  play_layer_pids=&quot;&quot;&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  for i in $(seq $layer_number)&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  do&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    aplay layer$i.wav &amp;amp;&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    play_layer_pids=&quot;$! $play_layer_pids&quot;&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  done&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;p&gt;We change current layer to record name to &lt;code class=&quot;highlighter-rouge&quot;&gt;layer${layer_number}.wav&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;layer.wav&lt;/code&gt; (after incrementing it):&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;context&quot;&gt; record_layer() {&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   record_layer_pid=&quot;&quot;&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   if $(cat should_record_layer)&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   then&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    arecord -f S16_LE -r 48000 -D hw:1,0 layer.wav &amp;amp;&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    layer_number=$[ $layer_number + 1 ]&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    arecord -f S16_LE -r 48000 -D hw:1,0 layer${layer_number}.wav &amp;amp;&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;     record_layer_pid=$!&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;     echo false &amp;gt; should_record_layer&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   fi&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;p&gt;We add a function to remove the last layer registered if &lt;code class=&quot;highlighter-rouge&quot;&gt;should_remove_layer&lt;/code&gt; file contains &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, by decrementing &lt;code class=&quot;highlighter-rouge&quot;&gt;$layer_number&lt;/code&gt;:&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;insert&quot;&gt;+remove_layer() {&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  record_layer_pid=&quot;&quot;&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  if $(cat should_remove_layer)&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  then&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    layer_number=$[ $layer_number - 1 ]&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    echo false &amp;gt; should_remove_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  fi&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+}&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;p&gt;We initialize &lt;code class=&quot;highlighter-rouge&quot;&gt;should_remove_layer&lt;/code&gt; to false, layer_number to 0, and rename &lt;code class=&quot;highlighter-rouge&quot;&gt;play_layer&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;play_layers&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;play_layer_pid&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;play_layer_pids&lt;/code&gt;:&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;context&quot;&gt; main_loop() {&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   echo false &amp;gt; should_record_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  echo false &amp;gt; should_remove_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  layer_number=0&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   while true&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   do&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    play_layer&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    record_layer  &lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    remove_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    play_layers&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    record_layer&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;     aplay background.wav&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;     [ $? -ne 0 ] &amp;amp;&amp;amp; break&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    [ -n $record_layer_pid ] &amp;amp;&amp;amp; kill $record_layer_pid&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-    [ -n $play_layer_pid ] &amp;amp;&amp;amp; kill $play_layer_pid&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    [ -n &quot;$record_layer_pid&quot; ] &amp;amp;&amp;amp; kill $record_layer_pid&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    [ -n &quot;$play_layer_pids&quot; ] &amp;amp;&amp;amp; kill $play_layer_pids&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt;   done&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; }&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;p&gt;Instead of waiting for only one input (since there was only one layer), we wait for multiple input in a loop.
If “a” is pressed, we notify that we &lt;code class=&quot;highlighter-rouge&quot;&gt;should_remove_layer&lt;/code&gt;.
Overwise, we notify that we &lt;code class=&quot;highlighter-rouge&quot;&gt;should_record_layer&lt;/code&gt;:&lt;/p&gt;

&lt;div id=&quot;wrapper&quot;&gt;
&lt;pre class=&quot;insert&quot;&gt;+input_loop() {&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  while true&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  do&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    input&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    [ &quot;$key&quot; = $'\003' ] &amp;amp;&amp;amp; break&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    if [ &quot;$key&quot; = &quot;a&quot; ]&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    then&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+      echo true &amp;gt; should_remove_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    else&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+      echo true &amp;gt; should_record_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    fi&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+    sleep 1&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+  done&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+}&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; record_background&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; main_loop &amp;amp;&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; main_loop_pid=$!&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-input&lt;/pre&gt;
&lt;pre class=&quot;delete&quot;&gt;-echo true &amp;gt; should_record_layer&lt;/pre&gt;
&lt;pre class=&quot;insert&quot;&gt;+input_loop&lt;/pre&gt;
&lt;pre class=&quot;context&quot;&gt; wait $main_loop_pid&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&quot;wrapper&quot;&gt;
&lt;/div&gt;

&lt;h1 id=&quot;the-whole-script&quot;&gt;The whole script&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;

input&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  stty raw
  &lt;span class=&quot;nv&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dd &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 2&amp;gt; /dev/null&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;rc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$rc&lt;/span&gt;
  stty &lt;span class=&quot;nt&quot;&gt;-raw&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

record_background&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  input
  arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 background.wav &amp;amp;
  &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
  sleep 1
  input
  &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

play_layers&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;play_layer_pids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;seq &lt;span class=&quot;nv&quot;&gt;$layer_number&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;aplay layer&lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;play_layer_pids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$play_layer_pids&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

record_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;should_record_layer&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layer_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$layer_number&lt;/span&gt; + 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 layer&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layer_number&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

remove_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;should_remove_layer&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;layer_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$layer_number&lt;/span&gt; - 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_remove_layer
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main_loop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
  &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_remove_layer
  &lt;span class=&quot;nv&quot;&gt;layer_number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
  &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;remove_layer
    play_layers
    record_layer
    aplay background.wav
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$play_layer_pids&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pids&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

input_loop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;input
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;$'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\0&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;03'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break
    &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$key&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;a&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_remove_layer
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;sleep 1
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

record_background
main_loop &amp;amp;
&lt;span class=&quot;nv&quot;&gt;main_loop_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
input_loop
&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$main_loop_pid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;The whole script is now available &lt;a href=&quot;https://github.com/yazgoo/looperish&quot;&gt;in its own repo&lt;/a&gt;.
Of course, patches are welcome !&lt;/p&gt;

&lt;p&gt;I use this script on a daily basis, and there are tons of things that could be polished.
Maybe I’ll rewrite it in some other language :)&lt;/p&gt;</content><author><name></name></author><category term="shell" /><category term="linux" /><category term="loop" /><summary type="html">Creating a looper in shell part 3: multiple layers</summary></entry><entry><title type="html">Creating a looper in shell part 2: adding a layer</title><link href="http://localhost:4000/blag/2019/02/18/creating-a-looper-in-shell-part-2.html" rel="alternate" type="text/html" title="Creating a looper in shell part 2: adding a layer" /><published>2019-02-18T00:00:00+01:00</published><updated>2019-02-18T00:00:00+01:00</updated><id>http://localhost:4000/blag/2019/02/18/creating-a-looper-in-shell-part-2</id><content type="html" xml:base="http://localhost:4000/blag/2019/02/18/creating-a-looper-in-shell-part-2.html">&lt;h1 id=&quot;what-were-aiming-for&quot;&gt;What we’re aiming for&lt;/h1&gt;

&lt;p&gt;In the &lt;a href=&quot;../12/creating-a-looper-in-shell.html&quot;&gt;previous article&lt;/a&gt;, we saw how to create a basic looper in shell.&lt;/p&gt;

&lt;p&gt;This creates our background sound.&lt;/p&gt;

&lt;p&gt;Lets add an “overdub” function, which is a way to add a layer on top of the background,&lt;/p&gt;

&lt;p&gt;Here is a diagram showing what we’re aiming for:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blag/images/looper_with_layer_timeline.png&quot; alt=&quot;timeline&quot; title=&quot;looper with layer timeline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If it’s still not clear, here is a video which explains how to use a looper
pedal from JustinGuitar youtube channel (see 8:10 timecode):&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Gd0NhglZWtw&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;how-well-proceed&quot;&gt;how we’ll proceed&lt;/h1&gt;

&lt;p&gt;Like in previous part, we’ll record the background in its own wav file (background.wav), based on pedal pushes.
Then we’ll play it in a loop.
On the third push, we’ll record the layer in layer.wav, and play it in subsequent loops, in parallel with background.wav.&lt;/p&gt;

&lt;h1 id=&quot;ipc&quot;&gt;IPC&lt;/h1&gt;

&lt;p&gt;Because terminal input can only be done in the foreground, 
We’ll have to capture the overdub pedal push in the foreground, and transfer the push to the main loop running in the background.&lt;/p&gt;

&lt;p&gt;To do that, we’ll use a very basic aproach: a text file which will contain false if the pedal was not pushed, and true if the pedal was pushed.&lt;/p&gt;

&lt;pre style=&quot;line-height:15px;&quot;&gt;
 ╭────────────╮             ╭───────────╮             ╭─────────────╮
 │            │   reads     │           │   writes    │             │
 │ main loop  ├────────────&amp;gt;│ text file │&amp;lt;────────────┤ pedal input │
 │            │             │           │             │             │
 ╰────────────╯             ╰───────────╯             ╰─────────────╯
&lt;/pre&gt;

&lt;h1 id=&quot;lets-do-it&quot;&gt;let’s do it&lt;/h1&gt;

&lt;p&gt;First, we will start the script by removing files from previous recordings:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm background.wav layer.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As in previous part, we’ll be using this function to capture key presses.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input() {
  stty raw
  dd bs=1 count=1 2&amp;gt; /dev/null
  stty -raw
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;then, let’s record background.wav - this is the same thing as in &lt;a href=&quot;../12/creating-a-looper-in-shell.html&quot;&gt;previous article&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;record_background&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  input
  arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 background.wav &amp;amp;
  &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
  sleep 1
  input
  &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As mentioned earlier, we’ll be using a file named &lt;code class=&quot;highlighter-rouge&quot;&gt;should_record_layer&lt;/code&gt; to notify the main_loop that it should start recording the layer (when it contains &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;), and initialize it at &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;main-loop&quot;&gt;main loop&lt;/h1&gt;

&lt;p&gt;then let’s start the main loop&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;play_layer
    record_layer  
    aplay background.wav
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s have a look at what we do here.&lt;/p&gt;

&lt;p&gt;First, if a layer was recorded, we play it in the background, and set a variable with aplay pid:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;play_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;play_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;layer.wav&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;aplay layer.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;play_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, if &lt;code class=&quot;highlighter-rouge&quot;&gt;should_record_layer&lt;/code&gt; file contains &lt;code class=&quot;highlighter-rouge&quot;&gt;true&lt;/code&gt;, we record in the background, and set a variable with arecord pid.
Once arecord is started, we can set &lt;code class=&quot;highlighter-rouge&quot;&gt;should_record_layer&lt;/code&gt; to false.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;record_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;should_record_layer&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 layer.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we can start playing background.wav:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;aplay background.wav
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we’re done playing background.wav, we kill arecord (the layer recorder) if it is running.
We also kill aplay (the layer player) if it is running.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;lets-finish-it&quot;&gt;let’s finish it&lt;/h1&gt;

&lt;p&gt;Then, we call main_loop in the background, wait for a pedal push, and notify main_loop
via &lt;code class=&quot;highlighter-rouge&quot;&gt;should_record_layer&lt;/code&gt; file.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main_loop &amp;amp;
&lt;span class=&quot;nv&quot;&gt;main_loop_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
input
&lt;span class=&quot;nb&quot;&gt;echo true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Finally, we wait for main_loop to stop:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$main_loop_pid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;the-whole-script&quot;&gt;The whole script&lt;/h1&gt;

&lt;p&gt;Here is the whole script&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;

input&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  stty raw
  dd &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 2&amp;gt; /dev/null
  stty &lt;span class=&quot;nt&quot;&gt;-raw&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

record_background&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  input
  arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 background.wav &amp;amp;
  &lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
  sleep 1
  input
  &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

play_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;play_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;layer.wav&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;aplay layer.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;play_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

record_layer&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;should_record_layer&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;then
    &lt;/span&gt;arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 layer.wav &amp;amp;
    &lt;span class=&quot;nv&quot;&gt;record_layer_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

main_loop&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
  &lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;play_layer
    record_layer  
    aplay background.wav
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$record_layer_pid&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$play_layer_pid&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

rm background.wav layer.wav
record_background
main_loop &amp;amp;
&lt;span class=&quot;nv&quot;&gt;main_loop_pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
input
&lt;span class=&quot;nb&quot;&gt;echo true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; should_record_layer
&lt;span class=&quot;nb&quot;&gt;wait&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$main_loop_pid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;to-conclude&quot;&gt;to conclude&lt;/h1&gt;

&lt;p&gt;With less than 60 lines of shell, we’ve made a software pedal with a layer.&lt;/p&gt;

&lt;p&gt;With a cheap USB pedal like this which sends a key press, this script is really nice to use:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blag/images/pedal.jpg&quot; alt=&quot;timeline&quot; title=&quot;pedal&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><category term="shell" /><category term="linux" /><category term="loop" /><summary type="html">What we’re aiming for</summary></entry><entry><title type="html">Creating a looper in shell</title><link href="http://localhost:4000/blag/2019/02/12/creating-a-looper-in-shell.html" rel="alternate" type="text/html" title="Creating a looper in shell" /><published>2019-02-12T00:00:00+01:00</published><updated>2019-02-12T00:00:00+01:00</updated><id>http://localhost:4000/blag/2019/02/12/creating-a-looper-in-shell</id><content type="html" xml:base="http://localhost:4000/blag/2019/02/12/creating-a-looper-in-shell.html">&lt;p&gt;On my free time I like to play the guitar.&lt;/p&gt;

&lt;p&gt;I have a descent microphone, and I’d like to be able to loop a part and then play over it.&lt;/p&gt;

&lt;p&gt;Here is a script to do just that.&lt;/p&gt;

&lt;p&gt;First, let’s create a function which will wait for any key to be pressed:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	stty raw
	dd &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 2&amp;gt; /dev/null
	stty &lt;span class=&quot;nt&quot;&gt;-raw&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then let’s call it:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then let’s start recording.&lt;/p&gt;

&lt;p&gt;arecord is configured for my mic (which is on hardware device 1,0).&lt;/p&gt;

&lt;p&gt;This also runs the command in the background and keeps its pid:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 out.wav &amp;amp;
&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We wait one second (to avoid double taps to be taken into account),
and wait for a key to be pushed again:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sleep 1
input
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then we stop arecord via kill:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We then can play the recorded file in a loop, 
and break the loop when aplay return code is not 0 (which happens when you it Ctrl+C)&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;aplay out.wav
	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the whole script:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env sh&lt;/span&gt;

input&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
	stty raw
	dd &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 2&amp;gt; /dev/null
	stty &lt;span class=&quot;nt&quot;&gt;-raw&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

input
arecord &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; S16_LE &lt;span class=&quot;nt&quot;&gt;-r&lt;/span&gt; 48000 &lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; hw:1,0 out.wav &amp;amp;
&lt;span class=&quot;nv&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$!&lt;/span&gt;
sleep 1
input

&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$pid&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;aplay out.wav
	&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-ne&lt;/span&gt; 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;break
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For now I can use an additional keyboard as a poor’s man pedal, here is how to use it:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;launch the script&lt;/li&gt;
  &lt;li&gt;push a key to start recording&lt;/li&gt;
  &lt;li&gt;push a key to stop recording and start playback&lt;/li&gt;
  &lt;li&gt;hit Ctrl+C to stop playback&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I like this script as it is super useful and really simple !&lt;/p&gt;</content><author><name></name></author><category term="shell" /><category term="linux" /><category term="loop" /><summary type="html">On my free time I like to play the guitar.</summary></entry><entry><title type="html">Writing a remote plugin for neovim in ruby</title><link href="http://localhost:4000/blag/2018/10/27/writing-a-remote-plugin-for-neovim-in-ruby.html" rel="alternate" type="text/html" title="Writing a remote plugin for neovim in ruby" /><published>2018-10-27T00:00:00+02:00</published><updated>2018-10-27T00:00:00+02:00</updated><id>http://localhost:4000/blag/2018/10/27/writing-a-remote-plugin-for-neovim-in-ruby</id><content type="html" xml:base="http://localhost:4000/blag/2018/10/27/writing-a-remote-plugin-for-neovim-in-ruby.html">&lt;p&gt;One of the features that made me switch to &lt;a href=&quot;https://neovim.io/&quot;&gt;neovim&lt;/a&gt; was that
at the time I was writing a &lt;a href=&quot;https://github.com/ensime/ensime-vim&quot;&gt;plugin&lt;/a&gt; 
for vim and I was surprised that
there was no easy way to do asynchronous calls.&lt;/p&gt;

&lt;p&gt;Meaning that if your command was taking too long, it freezed the UI.
A famous example of that is SQL client plugin, 
&lt;a href=&quot;https://github.com/vim-scripts/dbext.vim&quot;&gt;dbext&lt;/a&gt;, which will freeze
vim when your sql request takes too long.&lt;/p&gt;

&lt;h1 id=&quot;remote-plugins&quot;&gt;Remote plugins&lt;/h1&gt;

&lt;p&gt;Remote plugins are one of the best features of neovim.
Neovim will spawn a separate process, and communicate with it
via &lt;a href=&quot;https://github.com/msgpack/msgpack/blob/0b8f5ac/spec.md&quot;&gt;msgpack&lt;/a&gt; RPC API.&lt;/p&gt;

&lt;p&gt;So now plugins can process stuff in the background without vim freezing.&lt;/p&gt;

&lt;h1 id=&quot;neovim-ruby&quot;&gt;neovim-ruby&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/neovim/neovim-ruby#neovim-ruby&quot;&gt;neovim-ruby README&lt;/a&gt; is
well writen and will get you started, you should read it if you’re going
to write a remote plugin.&lt;/p&gt;

&lt;h1 id=&quot;winds-up-client&quot;&gt;winds-up-client&lt;/h1&gt;

&lt;p&gt;I like kiteboarding, which depends on wind conditions.
The thing is that its good to always have an eye on these conditions.
There’s a very good website which is called &lt;a href=&quot;http://winds-up.com/&quot;&gt;winds-up&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I had already written a &lt;a href=&quot;https://rubygems.org/gems/winds-up-client&quot;&gt;ruby gem&lt;/a&gt; to get a ultrashort report from winds-up, 
here is what it looks like&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;winds-up-client &lt;span class=&quot;nt&quot;&gt;--lpass&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--ultrashort&lt;/span&gt;
B3↓S1↘P2↘S13↘V2↘
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lpass&lt;/code&gt; option tells the client to log in winds-up.com with lastpass&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ultrashort&lt;/code&gt; tells that we want the shortest status report&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ultrashort report will contain all your favorite spots (first letter of each spot),
the wind speed (in nautical knots) and the wind direction (an arrow),&lt;/p&gt;

&lt;p&gt;For example &lt;code class=&quot;highlighter-rouge&quot;&gt;S13↘&lt;/code&gt; means that my spot ‘S’ has 13 knots comming from north-west.&lt;/p&gt;

&lt;h1 id=&quot;writing-the-plugin&quot;&gt;writing the plugin&lt;/h1&gt;

&lt;p&gt;I’m installing it in the same repo as my gem, so that when
it is installed via a plugin manager like vim-plug,
it already has the gem embeded with it.
Here is what it looks like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/yazgoo/winds-up-client/blob/master/rplugin/ruby/winds-up-client.rb&quot;&gt;rplugin/ruby/winds-up-client.rb&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'neovim'&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../lib/winds-up-client'&lt;/span&gt;
&lt;span class=&quot;no&quot;&gt;Neovim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WindsUpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;lpass: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ultrashort: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:WindsUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_var&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;windsup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;favorites_spots_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s break it down.&lt;/p&gt;

&lt;p&gt;I install it in &lt;code class=&quot;highlighter-rouge&quot;&gt;rplugin/ruby/winds-up-client.rb&lt;/code&gt; which is the path which neovim
uses to load ruby neovim plugin.&lt;/p&gt;

&lt;p&gt;I require my ruby library (which is in the same repo):&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;require_relative&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'../../lib/winds-up-client'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Within my plugin context, I instantiate my client with 
the same arguments as the command line shown before:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Neovim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;WindsUpClient&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;lpass: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ultrashort: &lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I declare a variable which will contain the timestamp of the last call to my command.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I declare my command, which can now be invoked via :WindsUp
It has an &lt;code class=&quot;highlighter-rouge&quot;&gt;nvim&lt;/code&gt; client object to interract with neovim.
I make sure it only gets called every 60 seconds, using last_check variable:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:WindsUp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;nil?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; 
      &lt;span class=&quot;c1&quot;&gt;# ... do stuff&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;last_check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then I call my command, and set a neovim variable (&lt;code class=&quot;highlighter-rouge&quot;&gt;windsup&lt;/code&gt;) contents 
with my ultrashort report.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.rubydoc.info/github/neovim/neovim-ruby/master/Neovim/Client&quot;&gt;Here&lt;/a&gt; 
is more documentation on what you can do with &lt;code class=&quot;highlighter-rouge&quot;&gt;nvim&lt;/code&gt; object&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;begin&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;set_var&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;windsup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;favorites_spots_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chomp&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I also catch any exception, because I don’t want my plugin to echo
its errors into vim (which it will do in case of exception).
You should definitely not do that when you’re developing your plugin.&lt;/p&gt;

&lt;h1 id=&quot;using-it&quot;&gt;using it&lt;/h1&gt;

&lt;p&gt;I then use it in my &lt;a href=&quot;https://github.com/yazgoo/vmux-c98tabbar/blob/master/plugin/vmux-c98tabbar.vim#L9&quot;&gt;tabbar&lt;/a&gt; vimscript (which is based on a fork of &lt;a href=&quot;https://github.com/yazgoo/c98tabbar.vim/tree/master/plugin&quot;&gt;c98tabbar.vim&lt;/a&gt;), by calling my command&lt;/p&gt;

&lt;div class=&quot;language-vimscript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; exists&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;:WindsUp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;WindsUp
&lt;span class=&quot;k&quot;&gt;endif&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;end then retrieving the &lt;code class=&quot;highlighter-rouge&quot;&gt;g:windup&lt;/code&gt; variable contents to display them.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if exists(&quot;g:windsup&quot;)
  let l:s .= g:windsup
endif
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the result:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/ruby-wuc-bar.png&quot; alt=&quot;tabbar&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;conclusion&lt;/h1&gt;

&lt;p&gt;So here was my very simple plugin, you can have a look at it &lt;a href=&quot;https://github.com/yazgoo/winds-up-client#neovim-plugin&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As you can see, neovim ruby plugins are really easy to write.&lt;/p&gt;

&lt;p&gt;Hope it can help you if you want to write your own plugin !&lt;/p&gt;</content><author><name></name></author><category term="vim" /><category term="neovim" /><category term="ruby" /><category term="plugin" /><summary type="html">One of the features that made me switch to neovim was that at the time I was writing a plugin for vim and I was surprised that there was no easy way to do asynchronous calls.</summary></entry><entry><title type="html">Monitoring MySQL load with /proc</title><link href="http://localhost:4000/blag/2018/10/10/monitoring-mysql-load-with-proc.html" rel="alternate" type="text/html" title="Monitoring MySQL load with /proc" /><published>2018-10-10T00:00:00+02:00</published><updated>2018-10-10T00:00:00+02:00</updated><id>http://localhost:4000/blag/2018/10/10/monitoring-mysql-load-with-proc</id><content type="html" xml:base="http://localhost:4000/blag/2018/10/10/monitoring-mysql-load-with-proc.html">&lt;p&gt;On a MySQL server, I launched the following command&lt;/p&gt;

&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;infile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'/tmp/bar'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;into&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;table&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command was running for quite some time, and I was looking for a fast way 
to know its progress,
withouth having to restart it or reload MySQL server changing some option.&lt;/p&gt;

&lt;p&gt;The idea is to find how much of &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/bar&lt;/code&gt; MySQL has read.&lt;/p&gt;

&lt;p&gt;First, lets find mysql PID:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pgrep mysql
1337
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, lets find &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/bar&lt;/code&gt; file descriptor in &lt;code class=&quot;highlighter-rouge&quot;&gt;/proc&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /proc/1337/fd |grep /tmp/bar
total 0
lr-x------. 1 user user 64 Oct 10 21:55 4 -&amp;gt; /tmp/bar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is file descriptor #4.&lt;/p&gt;

&lt;p&gt;fdinfo allows to know more about file descriptor #4.&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/1337/fdinfo/4
pos:    84443136
flags:  0100000
mnt_id: 650
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The first line gives us the read position in the file.
We then just have to divide it by the total size of the file:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$[&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /proc/1337/fdinfo/4|head &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt;|sed &lt;span class=&quot;s1&quot;&gt;'s/.*\t//'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;00 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
/ &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-nl&lt;/span&gt; /tmp/bar | awk &lt;span class=&quot;s1&quot;&gt;'{print $5}'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;%
42%
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So 42% of the file was processed !&lt;/p&gt;</content><author><name></name></author><category term="mysql" /><category term="proc" /><category term="linux" /><summary type="html">On a MySQL server, I launched the following command</summary></entry><entry><title type="html">Neovim terminal: one week without tmux</title><link href="http://localhost:4000/blag/neovim/terminal/multiplexer/tmux/2017/11/29/neovim-one-week-without-tmux.html" rel="alternate" type="text/html" title="Neovim terminal: one week without tmux" /><published>2017-11-29T00:00:00+01:00</published><updated>2017-11-29T00:00:00+01:00</updated><id>http://localhost:4000/blag/neovim/terminal/multiplexer/tmux/2017/11/29/neovim-one-week-without-tmux</id><content type="html" xml:base="http://localhost:4000/blag/neovim/terminal/multiplexer/tmux/2017/11/29/neovim-one-week-without-tmux.html">&lt;p&gt;For a while now there has been a &lt;a href=&quot;https://neovim.io/doc/user/nvim_terminal_emulator.html&quot;&gt;terminal feature integrated in neovim&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://vimcasts.org/episodes/neovim-terminal/&quot;&gt;There’s a vimcast&lt;/a&gt; on it if you want more info.&lt;/p&gt;

&lt;p&gt;Vim has buffers, tabs, and splits.
The question I’ve been asking myself is simple:
Is it possible to replace my use of tmux with neovim ?
Here is my feedback, after one week leaving tmux.&lt;/p&gt;

&lt;p&gt;Disclaimer:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;I am not an advanced vim/neovim user&lt;/li&gt;
  &lt;li&gt;Nor do I am an advanced tmux user&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;basic-usage-and-configuration&quot;&gt;Basic usage and configuration&lt;/h1&gt;

&lt;p&gt;To use the terminal in vim, just type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:terminal&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will replace the current buffer you’re focused on with a terminal emulator.
You can write in the terminal by switching to insert mode.&lt;/p&gt;

&lt;p&gt;To leave the emulator, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;^\^n&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I find it kind of complicated, so I’ve done the following re-mapping based on
&lt;a href=&quot;http://www.michaelabrahamsen.com/posts/replace-tmux-with-neovim/&quot;&gt;Michael Abrahamsen blogpost&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tnoremap jj &amp;lt;C-\&amp;gt;&amp;lt;C-n&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;basic-stuff&quot;&gt;Basic stuff&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To copy paste, the usual &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;p&lt;/code&gt; work, I mostly use the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; register.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;:resize&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;:vertical-resize&lt;/code&gt; works, which is awesome.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;^n&lt;/code&gt; completion will pick up everything managed by vim, including stuff written in your terminal !&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;zooming&quot;&gt;Zooming&lt;/h1&gt;

&lt;p&gt;tmux has a really nice &lt;a href=&quot;https://sanctum.geek.nz/arabesque/zooming-tmux-panes/&quot;&gt;zooming feature&lt;/a&gt;.
I checked a few solutions to do that with vim.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dhruvasagar/vim-zoom&quot;&gt;vim-zoom&lt;/a&gt;: kinda works, but your buffer needs to be saved&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/regedarek/ZoomWin&quot;&gt;ZoomWin&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;When I used it it had a few second lags when zooming&lt;/li&gt;
      &lt;li&gt;It did not play well with pandoc and other plugins, I got many errors when zooming/restoring&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/szw/vim-maximizer&quot;&gt;vim-maximizer&lt;/a&gt;:
    &lt;ul&gt;
      &lt;li&gt;It is equivalent to doing a resize, so other windows don’t disappear, they are just minimized&lt;/li&gt;
      &lt;li&gt;It is fast and simple =&amp;gt; my goto choice&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;nesting&quot;&gt;Nesting&lt;/h1&gt;

&lt;p&gt;There is no protection against running vim in vim:
  It will work, but some escape sequence might not.&lt;/p&gt;

&lt;h1 id=&quot;detaching&quot;&gt;Detaching&lt;/h1&gt;

&lt;p&gt;tmux is a terminal multiplexer, but it also supports detaching/attaching
  this is really a usefull feature I’m not ready to lose yet.
  For example, it allows me to upgrade my terminal emulator without loosing my session or to keep a session over SSH.&lt;/p&gt;

&lt;p&gt;As mentioned &lt;a href=&quot;https://github.com/neovim/neovim/issues/5035#issuecomment-288144900&quot;&gt;here&lt;/a&gt;,
  let’s use abduco (a detach clone) for that:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vmux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;abduco -e '^g' -A nvim-session nvim&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When we want to run vim as a terminal multiplexer, we’ll just have to run &lt;code class=&quot;highlighter-rouge&quot;&gt;vmux&lt;/code&gt;.
  Just use &lt;code class=&quot;highlighter-rouge&quot;&gt;CTRL+g&lt;/code&gt; to detach from the session.&lt;/p&gt;

&lt;h1 id=&quot;controlling-vim-session-from-within-terminal&quot;&gt;Controlling vim session from within terminal&lt;/h1&gt;

&lt;p&gt;One usual workflow I have is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;open a terminal&lt;/li&gt;
  &lt;li&gt;find files in a directory&lt;/li&gt;
  &lt;li&gt;open a file in the directory&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With tmux, I just had to do&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$ vim myfile&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;At first, I just copied the name of a file in a buffer, then opened it in my vim session.
But I find it complicated.
What I’d like to do is, from within my terminal, call:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vsplit myfile
$ split myfile
$ e myfile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s change our vmux command to:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vmux&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;(abduco -l|grep nvim-session) || rm -f /tmp/vim-server;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
  abduco -e '^g' -A nvim-session nvim --cmd &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;let g:server_addr = serverstart('/tmp/vim-server')&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will create a &lt;code class=&quot;highlighter-rouge&quot;&gt;/tmp/vim-server&lt;/code&gt; file used to comunicate with neovim.&lt;/p&gt;

&lt;p&gt;As a command line client to the vim server, 
Let’s create &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/.config/nvim/send_command_to_vim_session.py&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;neovim&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neovim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'socket'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/tmp/vim-server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;nvim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt;, let’s declare new commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;vmux-send&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/.config/nvim/send_command_to_vim_session.py&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;cmd &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;split vsplit e tabnew
&lt;span class=&quot;k&quot;&gt;do
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;vmux-send :&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$cmd&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now in a &lt;code class=&quot;highlighter-rouge&quot;&gt;:terminal&lt;/code&gt; session, we will be able to call split or vsplit command !&lt;/p&gt;

&lt;h1 id=&quot;cd-with-terminal&quot;&gt;cd with terminal&lt;/h1&gt;

&lt;p&gt;When in terminal mode, when I change directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt;), I would like vim to also change its
working directory (&lt;code class=&quot;highlighter-rouge&quot;&gt;:cd&lt;/code&gt;).
You can do so by adding this in your &lt;code class=&quot;highlighter-rouge&quot;&gt;.zshrc&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/sh&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;function &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nb&quot;&gt;builtin cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# if the parent process is nvim, do a vim cd &lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;comm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PPID&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nvim &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /dev/null&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; vmux-send :cd &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export cd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;whats-next&quot;&gt;What’s next&lt;/h1&gt;

&lt;p&gt;I loved my tmux status bar, so maybe I will try and find a replacement.
My window managers have their own status bars, so it is not that important to me though.&lt;/p&gt;

&lt;p&gt;Currently, my setup only supports one &lt;code class=&quot;highlighter-rouge&quot;&gt;vmux&lt;/code&gt; session, I need to fix that.&lt;/p&gt;

&lt;p&gt;Maybe I could create a vim plugin integrating most of the stuff I described in here.&lt;/p&gt;

&lt;p&gt;A protection against nesting could be nice.&lt;/p&gt;

&lt;p&gt;Finally, I would like to protect vim from closing with a prompt when in &lt;code class=&quot;highlighter-rouge&quot;&gt;vmux&lt;/code&gt; mode.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;So far, I’m having fun using neovim instead of tmux.
To me there is currently no obvious reason to switch back to tmux.&lt;/p&gt;</content><author><name></name></author><summary type="html">For a while now there has been a terminal feature integrated in neovim.</summary></entry><entry><title type="html">Consuming fuse_kafka events with logstash</title><link href="http://localhost:4000/blag/2015/01/15/consuming-fuse-kafka-events-with-logstash.html" rel="alternate" type="text/html" title="Consuming fuse_kafka events with logstash" /><published>2015-01-15T00:00:00+01:00</published><updated>2015-01-15T00:00:00+01:00</updated><id>http://localhost:4000/blag/2015/01/15/consuming-fuse-kafka-events-with-logstash</id><content type="html" xml:base="http://localhost:4000/blag/2015/01/15/consuming-fuse-kafka-events-with-logstash.html">&lt;p&gt;&lt;a href=&quot;https://github.com/yazgoo/fuse_kafka&quot;&gt;fuse_kafka&lt;/a&gt; is a project I’ve
been working on for the past months.&lt;/p&gt;

&lt;p&gt;Basically, it is a system that captures writes done to specific directories
and sends those to apache kafka.
It aims to facilitate heterongeneous log retrieval.&lt;/p&gt;

&lt;p&gt;Once you get logs in &lt;a href=&quot;http://kafka.apache.org/&quot;&gt;kafka&lt;/a&gt;, you may want to be able to put
them into a generic enough log centralization system.&lt;/p&gt;

&lt;p&gt;That’s why I wrote a plugin for &lt;a href=&quot;http://logstash.net/&quot;&gt;logstash&lt;/a&gt; which
allows to read logstash events from kafka.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blag/images/logstash_fuse_kafka_logo.png&quot; alt=&quot;logstash and fuse_kafka!&quot; title=&quot;logstash and fuse_kafka!&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;sample-architecture&quot;&gt;Sample architecture&lt;/h2&gt;

&lt;p&gt;Here is an example of &lt;code class=&quot;highlighter-rouge&quot;&gt;fuse_kafka&lt;/code&gt; setup&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../images/fuse_kafka_with_logstash.svg&quot; alt=&quot;generic architecture&quot; title=&quot;generic architecture&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;fuse_kafka is the log shipper: its role is to retrieve logs from machines and send it to kafka&lt;/li&gt;
  &lt;li&gt;kafka acts as the logging event messaging queue it is compouned with:
    &lt;ol&gt;
      &lt;li&gt;usually several kafka messaging broker machines&lt;/li&gt;
      &lt;li&gt;usually several zookeeper machines&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;logstash retrieves logs from kafka and writes them for example to an indexer 
 like elasticsearch&lt;/li&gt;
  &lt;li&gt;logs can then be queried via a UI (here kibana)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In this article, we’re going to do a fully local setup of this architecture.&lt;/p&gt;

&lt;h2 id=&quot;getting-stuff&quot;&gt;Getting stuff&lt;/h2&gt;

&lt;p&gt;Let’s create a working directory&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir /tmp/tutorial
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp/tutorial
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s download &lt;a href=&quot;http://logstash.net/&quot;&gt;logstash&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;wget https://download.elasticsearch.org/logstash/logstash/logstash-1.4.2.tar.gz
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xzf logstash-1.4.2.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And fuse_kafka:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git clone https://github.com/yazgoo/fuse_kafka.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;starting-fuse_kafka-agent&quot;&gt;Starting fuse_kafka agent&lt;/h2&gt;

&lt;p&gt;Following fuse_kafka quickstart in
&lt;a href=&quot;https://github.com/yazgoo/fuse_kafka/blob/master/README.md&quot;&gt;README&lt;/a&gt;,
we’ll first build fuse_kafka:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fuse_kafka/build.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, we’ll open one terminal and start zookeeper (this will also download kafka):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fuse_kafka/build.py zookeeper_start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On another terminal, let’s start kafka:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;./fuse_kafka/build.py kafka_start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, we’ll start fuse_kafka shipper:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;fuse_kafka
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;src/fuse_kafka.py start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s check the shipper is running:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;src/fuse_kafka.py status
listening on /tmp/fuse-kafka-test
service is running
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;starting-logstash-agent&quot;&gt;Starting logstash agent&lt;/h2&gt;

&lt;p&gt;Ok, so from a new terminal, in fuse_kafka directory, let’s launch logstash:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ../logstash-1.4.2/bin/logstash -p src/ -f conf/logstash.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, let’s try and write to the directory that fuse_kafka is watching:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ echo &quot;hello, world&quot; &amp;gt; /tmp/fuse-kafka-test/first
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On logstash terminal, you should get this output
(see &lt;a href=&quot;https://github.com/yazgoo/fuse_kafka/blob/master/README.md&quot;&gt;README&lt;/a&gt;
 for more information on each field):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;path&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/tmp/fuse-kafka-test/first&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;pid&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4682&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;uid&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;s2&quot;&gt;&quot;gid&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;@message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello, world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2015-01-16T11:45:41.000+01:00&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
          &lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yazgoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;group&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;yazgoo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;command&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;-bash &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;@version&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0.1.4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;@fields&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;hostname&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
         &lt;span class=&quot;s2&quot;&gt;&quot;@tags&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;test&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This shows that the whole thing worked as expected:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. fuse_kafka captured the writing done with echo and sent it to kafka
1. logstash read it from kafka
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;under-the-hood&quot;&gt;Under the hood&lt;/h2&gt;

&lt;h3 id=&quot;logstash-configuration&quot;&gt;logstash configuration&lt;/h3&gt;

&lt;p&gt;Let’s have a look at logstash configuration in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/logstash.conf&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kafka&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;load&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$PWD/kafka_2.8.0-0.8.1.1/libs/**/*.jar&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;zk_connect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;group_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logstash&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;logs&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;num_threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the most basic configuration (see &lt;a href=&quot;http://logstash.net/docs/1.4.2/configuration#conditionals&quot;&gt;documentation&lt;/a&gt; for more information on the syntax).&lt;/p&gt;

&lt;p&gt;The output part is writing events to stdout.&lt;/p&gt;

&lt;p&gt;In the input part,
we’re reading from a local kafka (&lt;code class=&quot;highlighter-rouge&quot;&gt;zk_connect&lt;/code&gt; is zookeeper address),
    &lt;code class=&quot;highlighter-rouge&quot;&gt;load&lt;/code&gt;ing jars from kafka directory, and reading logs &lt;code class=&quot;highlighter-rouge&quot;&gt;topic&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;kafka-plugin&quot;&gt;kafka plugin&lt;/h3&gt;

&lt;p&gt;We use &lt;a href=&quot;https://github.com/yazgoo/fuse_kafka/blob/master/src/logstash/inputs/kafka.rb&quot;&gt;kafka input plugin&lt;/a&gt;,
which is available in &lt;code class=&quot;highlighter-rouge&quot;&gt;src/logstash/inputs/kafka.rb&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This plugin is based on kafka java consumer, hence the jars we load from
&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;$PWD/kafka_2.8.0-0.8.1.1/libs/**/*.jar&quot;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;using-elasticsearch-and-kibana&quot;&gt;Using elasticsearch and kibana&lt;/h2&gt;

&lt;p&gt;logstash being so easy to use, we can enable kibana and elastic search,
just by replacing the output line in &lt;code class=&quot;highlighter-rouge&quot;&gt;conf/logstash.conf&lt;/code&gt; with:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;elasticsearch&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;host&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;localhost&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;embedded&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So now, let’s launch logstash with elasticsearch and kibana UI in embedded mode:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;../logstash-1.4.2/bin/logstash -p src/ -f conf/logstash.conf web --port 1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A default UI should be available at 
&lt;a href=&quot;http://localhost:1234/index.html#/dashboard/file/guided.json&quot;&gt;http://localhost:1234/index.html#/dashboard/file/guided.json&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;code class=&quot;highlighter-rouge&quot;&gt;DOCUMENTS&lt;/code&gt; widget, lets select:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;@fields.hostname&lt;/li&gt;
  &lt;li&gt;@timestamp&lt;/li&gt;
  &lt;li&gt;path&lt;/li&gt;
  &lt;li&gt;@message&lt;/li&gt;
  &lt;li&gt;command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is what we get:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blag/images/kibana.png&quot; alt=&quot;kibana screenshot&quot; title=&quot;kibana screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Logstash/ElasticSearch/Kibana are awesome, and fuse_kafka/kafka 
now can fit right with this power trio!&lt;/p&gt;</content><author><name></name></author><category term="logstash" /><category term="log centralization" /><category term="fuse_kafka" /><category term="elasticsearch" /><category term="kibana" /><category term="kafka" /><summary type="html">fuse_kafka is a project I’ve been working on for the past months.</summary></entry><entry><title type="html">Output rotation with logstash</title><link href="http://localhost:4000/blag/2015/01/08/output-rotation-with-logstash.html" rel="alternate" type="text/html" title="Output rotation with logstash" /><published>2015-01-08T00:00:00+01:00</published><updated>2015-01-08T00:00:00+01:00</updated><id>http://localhost:4000/blag/2015/01/08/output-rotation-with-logstash</id><content type="html" xml:base="http://localhost:4000/blag/2015/01/08/output-rotation-with-logstash.html">&lt;p&gt;I love &lt;a href=&quot;http://logstash.net/&quot;&gt;logstash&lt;/a&gt;, it is a really powerfull tool,
and it also leverages jruby so it is really self-contained and portable.&lt;/p&gt;

&lt;p&gt;Let’s say you want to use &lt;code class=&quot;highlighter-rouge&quot;&gt;n&lt;/code&gt; different outputs based on current date.
Here is the solution I use.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Lets write logstash &lt;a href=&quot;http://logstash.net/docs/1.4.2/configuration&quot;&gt;configuration&lt;/a&gt;.
First, we’ll be using &lt;a href=&quot;http://logstash.net/docs/1.4.2/inputs/stdin&quot;&gt;stdin&lt;/a&gt;
as input.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, lets &lt;a href=&quot;http://logstash.net/docs/1.4.2/filters/mutate#add_field&quot;&gt;add a field&lt;/a&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;t&lt;/code&gt; containing the time.
Logstash configuration have a nice feature called
&lt;a href=&quot;http://logstash.net/docs/1.4.2/configuration#sprintf&quot;&gt;sprintf&lt;/a&gt;,
which allows you to set a value based on a field or on a java
&lt;a href=&quot;http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html&quot;&gt;DateTimeFormat&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here, I will use the seconds in current minute, but you could, for example
use the day (by replacing &lt;code class=&quot;highlighter-rouge&quot;&gt;ss&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;dd&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{+ss}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now, lets write our output (we’ll write on &lt;a href=&quot;http://logstash.net/docs/1.4.2/outputs/stdout&quot;&gt;stdout&lt;/a&gt; for tests purpose) using
&lt;a href=&quot;http://logstash.net/docs/1.4.2/configuration#conditionals&quot;&gt;conditionals&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If the time field is even, we will display events with rubydebug codec:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*[02468]$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If it is odd, we will display events with json codec:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*[13579]$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s close the output bracket:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the whole configuration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mutate&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;add_field&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;%{+ss}&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*[02468]$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rubydebug&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/.*[13579]$/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;codec&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;testing-it&quot;&gt;Testing it&lt;/h2&gt;

&lt;p&gt;Lets run the previous configuration with logstash sending an input.
Here, on an odd second:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;blax | ./bin/logstash agent &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /tmp/logstash &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;blax&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;@version&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;2015-01-09T19:14:15.517Z&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;15&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here, on an even second:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!bash&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;blax | ./bin/logstash agent &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /tmp/logstash &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;blax&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;@version&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;@timestamp&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;2015-01-09T19:14:24.232Z&quot;&lt;/span&gt;,
          &lt;span class=&quot;s2&quot;&gt;&quot;host&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;machine&quot;&lt;/span&gt;,
             &lt;span class=&quot;s2&quot;&gt;&quot;t&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;24&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;##Conclusion##&lt;/p&gt;

&lt;p&gt;Here, we chose the output based on the second parity using regexes.&lt;/p&gt;

&lt;p&gt;But we may have chosen another criteria, for example,
we might have chosen an output on the two first seconds via this conditional:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!ruby&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;02&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We also have chosen the output based on the &lt;code class=&quot;highlighter-rouge&quot;&gt;@timestamp&lt;/code&gt; field, but I wanted to use
an output based on the actual current time, not based on the time associated with an event
(both may differ).&lt;/p&gt;</content><author><name></name></author><category term="logstash" /><summary type="html">I love logstash, it is a really powerfull tool, and it also leverages jruby so it is really self-contained and portable.</summary></entry><entry><title type="html">Orphan black gets it right</title><link href="http://localhost:4000/blag/2015/01/02/orphan-black-gets-it-right.html" rel="alternate" type="text/html" title="Orphan black gets it right" /><published>2015-01-02T00:00:00+01:00</published><updated>2015-01-02T00:00:00+01:00</updated><id>http://localhost:4000/blag/2015/01/02/orphan-black-gets-it-right</id><content type="html" xml:base="http://localhost:4000/blag/2015/01/02/orphan-black-gets-it-right.html">&lt;p&gt;I’ve been re-watching the awesome Orphan Black first series.
If you’ve not watched it yet, this post might contain spoilers.&lt;/p&gt;

&lt;p&gt;I’m not going to talk about Tatiana Maslany acting nor about
special effects when twins are involved which are both great.&lt;/p&gt;

&lt;p&gt;What I’m gonna talk about is the geeky stuff happening on the last
episode of the first season.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h2 id=&quot;information-we-get&quot;&gt;Information we get&lt;/h2&gt;

&lt;p&gt;Here is the plot: two characters are trying to figure out how 
information is encoded into one’s genome.&lt;/p&gt;

&lt;p&gt;We get this screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://localhost:4000/blag/images/screenshot_genome.png&quot; alt=&quot;genome screenshot&quot; title=&quot;genome screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Delphine also states that she knows Cosima’s tag #, which is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;324b21 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I’m gonna assume that what we see here actually means something
(remember, we’re watching TV).&lt;/p&gt;

&lt;h2 id=&quot;decoding&quot;&gt;Decoding&lt;/h2&gt;

&lt;p&gt;Ok, so let’s try and decode the part that’s highligted!&lt;/p&gt;

&lt;p&gt;Here it is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;GCTTGCTTCGAAGGTCGCAAGTGCGAAGCGTGCGTTGGAGCGATGCGA
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This part is 48 nucleotides long.
One thing you can notice here is that 48 is a multiple of 8 (6 times 8).&lt;/p&gt;

&lt;p&gt;Oh! 324b21, also is 6 characters long!&lt;/p&gt;

&lt;p&gt;Let’s assume the second 8 bytes encode the character ‘2’ in ASCII,
which is 50 in ASCII, 00110010 in binary.
Following this assumption, CGAAGGTC is equivalent to 00110010.
So G and C would be zeroes, and A and T would be ones.&lt;/p&gt;

&lt;h2 id=&quot;wrapping-it-up&quot;&gt;Wrapping it up&lt;/h2&gt;

&lt;p&gt;Now, we can write a script that tries and decodes clone DNA:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ARGV&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[AT]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/[^1]/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scan&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/......../&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;collect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;chr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;substitutes As and Ts with 1s&lt;/li&gt;
  &lt;li&gt;substitutes all other letters with 0s&lt;/li&gt;
  &lt;li&gt;split the string in strings of eight bits&lt;/li&gt;
  &lt;li&gt;convert each 8bit part to an integer from base 2&lt;/li&gt;
  &lt;li&gt;convert each integer to a character&lt;/li&gt;
  &lt;li&gt;joins all characters&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Lets try it on our sequence:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ ./decode.rb GCTTGCTTCGAAGGTCGCAAGTGCGAAGCGTGCGTTGGAGCGATGCGA
324b21
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cosima’s tag!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Our assumption on the second character encoding ‘2’ in ASCII is validated.
The other assumption that it all made sense, which was far more risky is
validated too!&lt;/p&gt;

&lt;p&gt;This kind of detail on TV is just great.
It just make the series far more realistic 
(though I have no idea on how realistic the biology part is)!&lt;/p&gt;</content><author><name></name></author><category term="orphan black" /><category term="ascii" /><summary type="html">I’ve been re-watching the awesome Orphan Black first series. If you’ve not watched it yet, this post might contain spoilers.</summary></entry></feed>